{"version":3,"sources":["logo.svg","Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","props","handleClick","e","setState","loading","fetch","URL","attribute","condition","then","resp","json","data","results","ifShow","handleSelect","value","handleChange","names","key","text","state","resultShow","this","length","map","result","href","url","name","file","ID","Container","Form","Group","widths","Select","fluid","label","options","placeholder","onChange","Input","Button","onClick","Segment","style","overflow","maxHeight","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,6LCwE5BC,E,YApEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAkBVC,YAAc,SAACC,GACX,EAAKC,SAAS,CAAEC,SAAS,IACzBC,MAAM,GAAD,OAAI,EAAKC,IAAT,mBAAuB,EAAKC,UAA5B,YAAyC,EAAKC,YAAaC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAAQF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAAEU,QAASD,OAClI,EAAKT,SAAS,CAAEC,SAAS,IACzB,EAAKD,SAAS,CAAEW,QAAQ,KAvBT,EAyBnBC,aAAe,SAACb,EAAD,GAAmB,IAAbc,EAAY,EAAZA,MAAc,EAAKT,UAAYS,GAzBjC,EA0BnBC,aAAe,SAACf,EAAD,GAAmB,IAAbc,EAAY,EAAZA,MAAc,EAAKR,UAAYQ,GAxBhD,EAAKV,IAAM,iBACX,EAAKY,MAAQ,CAAC,CAAEC,IAAK,YAAaH,MAAO,YAAaI,KAAM,aACxD,CAAED,IAAK,cAAeH,MAAO,cAAeI,KAAM,eAClD,CAAED,IAAK,WAAYH,MAAO,WAAYI,KAAM,YAC5C,CAACD,IAAK,OAAQH,MAAO,OAAQI,KAAM,SACvC,EAAKb,UAAU,GACf,EAAKC,UAAU,GACf,EAAKa,MAAQ,CACTP,QAAQ,EACRD,QAAS,GACTT,SAAQ,GAZG,E,sEA4Bf,IAAIkB,EAAW,KAaf,OAXIC,KAAKF,MAAMR,QAAQW,OAAS,EAC5BF,EAEIC,KAAKF,MAAMR,QAAQY,KAAI,SAAAC,GAAM,OACzB,uBAAGC,KAAMD,EAAOE,KAAMF,EAAOG,KAA7B,OAAuCH,EAAOI,KAA9C,SAA0DJ,EAAOK,GAAjE,QAI2B,IAA9BR,KAAKF,MAAMR,QAAQW,QAAgBD,KAAKF,MAAMP,SACnDQ,EAAa,8CAGb,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,OAAO,SAEf,kBAACF,EAAA,EAAKG,OAAN,CACIC,OAAK,EACLC,MAAM,iBACNC,QAAShB,KAAKL,MACdsB,YAAY,sBACZC,SAAUlB,KAAKR,gBAGvB,kBAACkB,EAAA,EAAKC,MAAN,CAAYC,OAAO,SACf,kBAACF,EAAA,EAAKS,MAAN,CAAYL,OAAK,EAACC,MAAM,kBAAkBE,YAAY,yBAAyBC,SAAUlB,KAAKN,gBAElG,kBAACgB,EAAA,EAAKU,OAAN,CAAaC,QAASrB,KAAKtB,YAAaG,QAASmB,KAAKF,MAAMjB,SAA5D,WAEJ,kBAACyC,EAAA,EAAD,CAASC,MAAO,CAAEC,SAAU,OAAQC,UAAW,OAC1CzB,KAAKF,MAAMP,OAAS,+CAA2B,KAC/CQ,Q,GA9DA2B,IAAMC,WCwBZC,MAtBf,WACI,OACA,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtD,MAAK,SAAAuD,GACjCA,EAAaC,kB","file":"static/js/main.a68d6808.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { Form, Dropdown, Button,Container,Segment } from \"semantic-ui-react\";\r\n\r\nclass Search extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.URL = 'localhost:8080';\r\n        this.names = [{ key: \"SystemUID\", value: \"SystemUID\", text: \"SystemUID\" },\r\n            { key: \"Description\", value: \"Description\", text: \"Description\" },\r\n            { key: \"FullName\", value: \"FullName\", text: \"FullName\" },\r\n            {key: \"Name\", value: \"Name\", text: \"Name\" }];\r\n        this.attribute=\"\";\r\n        this.condition=\"\";\r\n        this.state = {\r\n            ifShow: false,\r\n            results: [],\r\n            loading:false\r\n        }\r\n    }\r\n    //componentDidMount() {\r\n    //    fetch(`${this.URL}/sets`).then(resp => resp.json()).then(\r\n    //        data => {this.setState(sets:data) })\r\n    //}\r\n    handleClick = (e) => {\r\n        this.setState({ loading: true });\r\n        fetch(`${this.URL}/search/${this.attribute}/${this.condition}`).then(resp => resp.json()).then(data => { this.setState({ results: data })})\r\n        this.setState({ loading: false });\r\n        this.setState({ ifShow: true });\r\n    }\r\n    handleSelect = (e, { value }) => { this.attribute = value;}\r\n    handleChange = (e, { value }) => { this.condition = value;}\r\n    render() {\r\n        let resultShow=null;\r\n\r\n        if (this.state.results.length > 0) {\r\n            resultShow=(\r\n            \r\n                this.state.results.map(result => (\n                    <a href={result.url}>{result.name} in {result.file} (ID: {result.ID})</a>))\r\n            )\r\n        }\r\n\r\n        else if (this.state.results.length === 0 && this.state.ifShow) {\r\n            resultShow=( < p > Find nothing!</p >)\r\n        }\r\n        return (\r\n            <Container>\r\n                <Form>\n                    <Form.Group widths='equal'>\n\n                        <Form.Select\n                            fluid\n                            label='Attribute Name'\n                            options={this.names}\n                            placeholder='Select an attribute'\n                            onChange={this.handleSelect}\n                        />\n                    </Form.Group>\n                    <Form.Group widths='equal'>\n                        <Form.Input fluid label='Attribute Value' placeholder='Set the value you want' onChange={this.handleChange} />\n                    </Form.Group>\n                    <Form.Button onClick={this.handleClick} loading={this.state.loading}>Search</Form.Button>\n                </Form>\r\n                <Segment style={{ overflow: 'auto', maxHeight: 1200 }}>\r\n                    {this.state.ifShow ? <h1>Search results:</h1> : null}\r\n                    {resultShow}\r\n                </Segment>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Search from './Search';\n\nfunction App() {\n    return (\n    <Search/>\n    //<div className=\"App\">\n    //  <header className=\"App-header\">\n    //    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //    <p>\n    //      Edit <code>src/App.js</code> and save to reload.\n    //    </p>\n    //    <a\n    //      className=\"App-link\"\n    //      href=\"https://reactjs.org\"\n    //      target=\"_blank\"\n    //      rel=\"noopener noreferrer\"\n    //    >\n    //      Learn React\n    //    </a>\n    //  </header>\n    //</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}